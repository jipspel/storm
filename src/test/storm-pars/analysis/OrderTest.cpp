#include "storm-pars/api/analysis.h"
#include "storm/storage/BitVector.h"
#include "storm/storage/StronglyConnectedComponentDecomposition.h"
#include "test/storm_gtest.h"

TEST(OrderTest, Simple) {
    auto numberOfStates = 7;
    auto above = storm::storage::BitVector(numberOfStates);
    above.set(0);
    auto below = storm::storage::BitVector(numberOfStates);
    below.set(1);
    storm::storage::SparseMatrixBuilder<storm::RationalFunction> matrixBuilder(2, 2, 2);
    matrixBuilder.addNextValue(0, 0, storm::RationalFunction(1));
    matrixBuilder.addNextValue(1, 1, storm::RationalFunction(1));
    storm::storage::StronglyConnectedComponentDecompositionOptions options;
    options.forceTopologicalSort();
    auto matrix = matrixBuilder.build();
    auto decomposition = storm::storage::StronglyConnectedComponentDecomposition<storm::RationalFunction>(matrix, options);
    auto statesSorted = storm::utility::graph::getTopologicalSort(matrix);
    auto order = storm::analysis::Order(&above, &below, numberOfStates, decomposition, statesSorted, true);
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 0));
    EXPECT_EQ(nullptr, order.getNode(2));

    order.add(2);
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(2, 0));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 2));

    order.add(3);
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(2, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(3, 2));

    order.addToNode(4, order.getNode(2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(4, 0));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(4, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(4, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(3, 4));

    order.addBetween(5, order.getNode(0), order.getNode(3));

    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(5, 0));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(5, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(2, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(5, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(4, 5));

    order.addBetween(6, order.getNode(5), order.getNode(3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(6, 0));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(6, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(6, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(2, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(6, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(6, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(6, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(6, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 6));

    order.addRelationNodes(order.getNode(6), order.getNode(4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(6, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(4, 6));
}

TEST(OrderTest, copy_order) {
    auto numberOfStates = 7;
    auto above = storm::storage::BitVector(numberOfStates);
    above.set(0);
    auto below = storm::storage::BitVector(numberOfStates);
    below.set(1);
    storm::storage::SparseMatrixBuilder<storm::RationalFunction> matrixBuilder(2, 2, 2);
    matrixBuilder.addNextValue(0, 0, storm::RationalFunction(1));
    matrixBuilder.addNextValue(1, 1, storm::RationalFunction(1));
    storm::storage::StronglyConnectedComponentDecompositionOptions options;
    options.forceTopologicalSort();
    auto matrix = matrixBuilder.build();
    auto decomposition = storm::storage::StronglyConnectedComponentDecomposition<storm::RationalFunction>(matrix, options);
    auto statesSorted = storm::utility::graph::getTopologicalSort(matrix);
    auto order = storm::analysis::Order(&above, &below, numberOfStates, decomposition, statesSorted, true);
    order.add(2);
    order.add(3);
    order.addToNode(4, order.getNode(2));
    order.addBetween(5, order.getNode(0), order.getNode(3));
    order.addBetween(6, order.getNode(5), order.getNode(3));

    auto orderCopy = *order.copy();
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, orderCopy.compare(0, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, orderCopy.compare(1, 0));

    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, orderCopy.compare(0, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, orderCopy.compare(2, 0));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, orderCopy.compare(2, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, orderCopy.compare(1, 2));

    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, orderCopy.compare(2, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, orderCopy.compare(3, 2));

    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, orderCopy.compare(2, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, orderCopy.compare(4, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, orderCopy.compare(0, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, orderCopy.compare(4, 0));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, orderCopy.compare(4, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, orderCopy.compare(1, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, orderCopy.compare(4, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, orderCopy.compare(3, 4));

    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, orderCopy.compare(5, 0));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, orderCopy.compare(0, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, orderCopy.compare(5, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, orderCopy.compare(3, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, orderCopy.compare(5, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, orderCopy.compare(1, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, orderCopy.compare(5, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, orderCopy.compare(5, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, orderCopy.compare(5, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, orderCopy.compare(5, 4));

    order.addRelationNodes(order.getNode(6), order.getNode(4));
    orderCopy = *order.copy();
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, orderCopy.compare(6, 0));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, orderCopy.compare(0, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, orderCopy.compare(6, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, orderCopy.compare(1, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, orderCopy.compare(6, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, orderCopy.compare(2, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, orderCopy.compare(6, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, orderCopy.compare(3, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, orderCopy.compare(6, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, orderCopy.compare(4, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, orderCopy.compare(6, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, orderCopy.compare(5, 6));
}

TEST(OrderTest, merge_nodes) {
    auto numberOfStates = 7;
    auto above = storm::storage::BitVector(numberOfStates);
    above.set(0);
    auto below = storm::storage::BitVector(numberOfStates);
    below.set(1);
    storm::storage::SparseMatrixBuilder<storm::RationalFunction> matrixBuilder(2, 2, 2);
    matrixBuilder.addNextValue(0, 0, storm::RationalFunction(1));
    matrixBuilder.addNextValue(1, 1, storm::RationalFunction(1));
    storm::storage::StronglyConnectedComponentDecompositionOptions options;
    options.forceTopologicalSort();
    auto matrix = matrixBuilder.build();
    auto decomposition = storm::storage::StronglyConnectedComponentDecomposition<storm::RationalFunction>(matrix, options);
    auto statesSorted = storm::utility::graph::getTopologicalSort(matrix);
    auto order = storm::analysis::Order(&above, &below, numberOfStates, decomposition, statesSorted, true);
    order.add(2);
    order.add(3);
    order.addToNode(4, order.getNode(2));
    order.addBetween(5, order.getNode(0), order.getNode(3));
    order.addBetween(6, order.getNode(5), order.getNode(3));

    // Order should look like:
    // 1 < 2,4 < 0
    // 1 < 3 < 6 < 5 < 0

    order.mergeNodes(order.getNode(4), order.getNode(5));
    // Order should look like:
    // 1 < 3 < 6 < 2,4,5 < 0

    EXPECT_FALSE(order.isInvalid());
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(4, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 6));
    order.mergeNodes(order.getNode(6), order.getNode(5));
    EXPECT_TRUE(order.isInvalid());
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(5, 6));
}

TEST(OrderTest, merge_nodes_2) {
    auto numberOfStates = 12;
    auto above = storm::storage::BitVector(numberOfStates);
    above.set(0);
    auto below = storm::storage::BitVector(numberOfStates);
    below.set(1);
    storm::storage::SparseMatrixBuilder<storm::RationalFunction> matrixBuilder(2, 2, 2);
    matrixBuilder.addNextValue(0, 0, storm::RationalFunction(1));
    matrixBuilder.addNextValue(1, 1, storm::RationalFunction(1));
    storm::storage::StronglyConnectedComponentDecompositionOptions options;
    options.forceTopologicalSort();
    auto matrix = matrixBuilder.build();
    auto decomposition = storm::storage::StronglyConnectedComponentDecomposition<storm::RationalFunction>(matrix, options);
    auto statesSorted = storm::utility::graph::getTopologicalSort(matrix);
    auto order = storm::analysis::Order(&above, &below, numberOfStates, decomposition, statesSorted, true);
    order.add(2);
    order.add(3);
    order.add(4);
    order.add(5);
    order.add(6);
    order.add(7);
    order.add(8);
    order.add(9);
    order.add(10);
    order.add(11);
    order.addRelation(2, 5);
    order.addRelation(3, 4);
    order.addRelation(4, 5);
    order.addRelation(5, 6);
    order.addRelation(6, 7);
    order.addRelation(7, 8);
    order.addRelation(7, 9);
    order.addRelation(8, 10);
    order.addRelation(9, 11);

    order.merge(4, 8);
    // Order should be invalid as we already had 4 above 8
    EXPECT_TRUE(order.isInvalid());
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(2, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(4, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(4, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(4, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(5, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(5, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(5, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(6, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(6, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(6, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(6, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(6, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(7, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(7, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(7, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(7, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(8, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(8, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(8, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(9, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(9, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(10, 11));
}

TEST(OrderTest, merge_nodes_3) {
    auto numberOfStates = 12;
    auto above = storm::storage::BitVector(numberOfStates);
    above.set(0);
    auto below = storm::storage::BitVector(numberOfStates);
    below.set(1);
    storm::storage::SparseMatrixBuilder<storm::RationalFunction> matrixBuilder(2, 2, 2);
    matrixBuilder.addNextValue(0, 0, storm::RationalFunction(1));
    matrixBuilder.addNextValue(1, 1, storm::RationalFunction(1));
    storm::storage::StronglyConnectedComponentDecompositionOptions options;
    options.forceTopologicalSort();
    auto matrix = matrixBuilder.build();
    auto decomposition = storm::storage::StronglyConnectedComponentDecomposition<storm::RationalFunction>(matrix, options);
    auto statesSorted = storm::utility::graph::getTopologicalSort(matrix);
    auto order = storm::analysis::Order(&above, &below, numberOfStates, decomposition, statesSorted, true);
    order.add(2);
    order.add(3);
    order.add(4);
    order.add(5);
    order.add(6);
    order.add(7);
    order.add(8);
    order.add(9);
    order.add(10);
    order.add(11);
    order.addRelation(2, 5);
    order.addRelation(3, 4);
    order.addRelation(4, 5);
    order.addRelation(5, 6);
    order.addRelation(6, 7);
    order.addRelation(7, 8);
    order.addRelation(7, 9);
    order.addRelation(8, 10);
    order.addRelation(9, 11);

    order.merge(8, 4);
    EXPECT_TRUE(order.isInvalid());
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 11));

    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(2, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(4, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(4, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(4, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(5, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(5, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(5, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(6, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(6, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(6, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(6, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(6, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(7, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(7, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(7, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(7, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(8, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(8, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(8, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(9, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(9, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(10, 11));
}

TEST(OrderTest, merge_nodes_4) {
    auto numberOfStates = 12;
    auto above = storm::storage::BitVector(numberOfStates);
    above.set(0);
    auto below = storm::storage::BitVector(numberOfStates);
    below.set(1);
    storm::storage::SparseMatrixBuilder<storm::RationalFunction> matrixBuilder(2, 2, 2);
    matrixBuilder.addNextValue(0, 0, storm::RationalFunction(1));
    matrixBuilder.addNextValue(1, 1, storm::RationalFunction(1));
    storm::storage::StronglyConnectedComponentDecompositionOptions options;
    options.forceTopologicalSort();
    auto matrix = matrixBuilder.build();
    auto decomposition = storm::storage::StronglyConnectedComponentDecomposition<storm::RationalFunction>(matrix, options);
    auto statesSorted = storm::utility::graph::getTopologicalSort(matrix);
    auto order = storm::analysis::Order(&above, &below, numberOfStates, decomposition, statesSorted, true);
    order.add(2);
    order.add(3);
    order.add(4);
    order.add(5);
    order.add(6);
    order.add(7);
    order.add(8);
    order.add(9);
    order.add(10);
    order.add(11);
    order.addRelation(2, 5);
    order.addRelation(2, 4);
    order.addRelation(3, 4);
    order.addRelation(4, 5);
    order.addRelation(5, 6);
    order.addRelation(6, 7);
    order.addRelation(7, 8);
    order.addRelation(7, 9);
    order.addRelation(8, 10);
    order.addRelation(9, 11);

    order.merge(2, 8);
    EXPECT_TRUE(order.isInvalid());
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 11));

    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(2, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(4, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(4, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(4, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(5, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(5, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(5, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(6, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(6, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(6, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(6, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(6, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(7, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(7, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(7, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(7, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(8, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(8, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(8, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(9, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(9, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(10, 11));
}

TEST(OrderTest, merge_nodes_5) {
    auto numberOfStates = 12;
    auto above = storm::storage::BitVector(numberOfStates);
    above.set(0);
    auto below = storm::storage::BitVector(numberOfStates);
    below.set(1);
    storm::storage::SparseMatrixBuilder<storm::RationalFunction> matrixBuilder(2, 2, 2);
    matrixBuilder.addNextValue(0, 0, storm::RationalFunction(1));
    matrixBuilder.addNextValue(1, 1, storm::RationalFunction(1));
    storm::storage::StronglyConnectedComponentDecompositionOptions options;
    options.forceTopologicalSort();
    auto matrix = matrixBuilder.build();
    auto decomposition = storm::storage::StronglyConnectedComponentDecomposition<storm::RationalFunction>(matrix, options);
    auto statesSorted = storm::utility::graph::getTopologicalSort(matrix);
    auto order = storm::analysis::Order(&above, &below, numberOfStates, decomposition, statesSorted, true);
    order.add(2);
    order.add(3);
    order.add(4);
    order.add(5);
    order.add(6);
    order.add(7);
    order.add(8);
    order.add(9);
    order.add(10);
    order.add(11);
    order.addRelation(2, 5);
    order.addRelation(2, 4);
    order.addRelation(3, 4);
    order.addRelation(4, 5);
    order.addRelation(5, 6);
    order.addRelation(6, 7);
    order.addRelation(7, 8);
    order.addRelation(7, 9);
    order.addRelation(8, 10);
    order.addRelation(9, 11);

    order.merge(2, 8);
    EXPECT_TRUE(order.isInvalid());
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 11));

    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(2, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(3, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(4, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(4, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(4, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(5, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(5, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(5, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(6, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(6, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(6, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(6, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(6, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(7, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(7, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(7, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(7, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(8, 9));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(8, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(8, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(9, 10));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(9, 11));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(10, 11));
}

TEST(OrderTest, merge_nodes_7) {
    auto numberOfStates = 7;
    auto above = storm::storage::BitVector(numberOfStates);
    auto below = storm::storage::BitVector(numberOfStates);
    below.set(1);
    storm::storage::SparseMatrixBuilder<storm::RationalFunction> matrixBuilder(2, 2, 2);
    matrixBuilder.addNextValue(0, 0, storm::RationalFunction(1));
    matrixBuilder.addNextValue(1, 1, storm::RationalFunction(1));
    storm::storage::StronglyConnectedComponentDecompositionOptions options;
    options.forceTopologicalSort();
    auto matrix = matrixBuilder.build();
    auto decomposition = storm::storage::StronglyConnectedComponentDecomposition<storm::RationalFunction>(matrix, options);
    auto statesSorted = storm::utility::graph::getTopologicalSort(matrix);
    auto order = storm::analysis::Order(&above, &below, numberOfStates, decomposition, statesSorted, true);
    order.add(2);
    order.add(3);
    order.add(4);
    order.add(5);
    order.add(6);
    order.addRelation(3, 2);
    order.addRelation(4, 3);
    order.addRelation(5, 4);
    order.addRelation(6, 3);

    order.merge(2, 4);
    EXPECT_TRUE(order.isInvalid());
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(0, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(0, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(0, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(0, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(0, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(2, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(2, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(3, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(4, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(4, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(5, 6));
}

TEST(OrderTest, merge_nodes_8) {
    auto numberOfStates = 7;
    auto above = storm::storage::BitVector(numberOfStates);
    auto below = storm::storage::BitVector(numberOfStates);
    below.set(1);
    storm::storage::SparseMatrixBuilder<storm::RationalFunction> matrixBuilder(2, 2, 2);
    matrixBuilder.addNextValue(0, 0, storm::RationalFunction(1));
    matrixBuilder.addNextValue(1, 1, storm::RationalFunction(1));
    storm::storage::StronglyConnectedComponentDecompositionOptions options;
    options.forceTopologicalSort();
    auto matrix = matrixBuilder.build();
    auto decomposition = storm::storage::StronglyConnectedComponentDecomposition<storm::RationalFunction>(matrix, options);
    auto statesSorted = storm::utility::graph::getTopologicalSort(matrix);
    auto order = storm::analysis::Order(&above, &below, numberOfStates, decomposition, statesSorted, true);
    order.add(2);
    order.add(3);
    order.add(4);
    order.add(5);
    order.add(6);
    order.addRelation(3, 2);
    order.addRelation(4, 3);
    order.addRelation(5, 4);
    order.addRelation(6, 3);

    order.merge(4, 2);
    EXPECT_TRUE(order.isInvalid());
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(0, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(0, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(0, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(0, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(0, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(2, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(2, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(3, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(4, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(4, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(5, 6));
}

TEST(OrderTest, merge_nodes_9) {
    auto numberOfStates = 7;
    auto above = storm::storage::BitVector(numberOfStates);
    auto below = storm::storage::BitVector(numberOfStates);
    below.set(1);
    storm::storage::SparseMatrixBuilder<storm::RationalFunction> matrixBuilder(2, 2, 2);
    matrixBuilder.addNextValue(0, 0, storm::RationalFunction(1));
    matrixBuilder.addNextValue(1, 1, storm::RationalFunction(1));
    storm::storage::StronglyConnectedComponentDecompositionOptions options;
    options.forceTopologicalSort();
    auto matrix = matrixBuilder.build();
    auto decomposition = storm::storage::StronglyConnectedComponentDecomposition<storm::RationalFunction>(matrix, options);
    auto statesSorted = storm::utility::graph::getTopologicalSort(matrix);
    auto order = storm::analysis::Order(&above, &below, numberOfStates, decomposition, statesSorted, true);
    order.add(2);
    order.add(3);
    order.add(4);
    order.add(5);
    order.add(6);
    order.addRelation(3, 2);
    order.addRelation(4, 3);
    order.addRelation(5, 4);
    order.addRelation(6, 3);
    order.addRelation(4, 2);

    order.merge(2, 4);
    EXPECT_TRUE(order.isInvalid());
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(0, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(0, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(0, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(0, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(0, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(2, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(2, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(3, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(4, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(4, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(5, 6));
}

TEST(OrderTest, merge_nodes_10) {
    auto numberOfStates = 9;
    auto above = storm::storage::BitVector(numberOfStates);
    above.set(0);
    auto below = storm::storage::BitVector(numberOfStates);
    below.set(1);
    storm::storage::SparseMatrixBuilder<storm::RationalFunction> matrixBuilder(2, 2, 2);
    matrixBuilder.addNextValue(0, 0, storm::RationalFunction(1));
    matrixBuilder.addNextValue(1, 1, storm::RationalFunction(1));
    storm::storage::StronglyConnectedComponentDecompositionOptions options;
    options.forceTopologicalSort();
    auto matrix = matrixBuilder.build();
    auto decomposition = storm::storage::StronglyConnectedComponentDecomposition<storm::RationalFunction>(matrix, options);
    auto statesSorted = storm::utility::graph::getTopologicalSort(matrix);
    auto order = storm::analysis::Order(&above, &below, numberOfStates, decomposition, statesSorted, true);
    order.add(2);
    order.add(3);
    order.addToNode(4, order.getNode(2));
    order.addBetween(5, order.getNode(0), order.getNode(3));
    order.addBetween(6, order.getNode(5), order.getNode(3));
    order.addBetween(7, order.getNode(2), order.getNode(1));
    order.addBetween(8, order.getNode(0), order.getNode(2));

    // Order should look like:
    // 1 < 7 < 2,4 < 8 < 0
    // 1 < 3 < 6 < 5 < 0
    ASSERT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 1));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 2));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 3));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 4));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 5));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 6));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 7));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 8));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 2));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 3));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 4));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 5));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 6));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 7));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 8));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(2, 3));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 4));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(2, 5));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(2, 6));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 7));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(2, 8));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(3, 4));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 5));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 6));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(3, 7));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(3, 8));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(4, 5));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(4, 6));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(4, 7));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(4, 8));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 6));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(5, 7));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(5, 8));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(6, 8));
    ASSERT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(7, 8));
    // 1 < 7 < 2,4 < 8 < 0
    // 1 < 3 < 6 < 5 < 0

    order.mergeNodes(order.getNode(4), order.getNode(6));
    // Order should look like:
    // 1 < 3 < 2,4,6 < 5 < 0
    // 1 < 3 < 2,4,6 < 8 < 0
    // 1 < 7 < 2,4,6 < 5 < 0
    // 1 < 7 < 2,4,6 < 8 < 0

    EXPECT_FALSE(order.isInvalid());
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 1));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(0, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 2));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(1, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 3));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(2, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(2, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(2, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(2, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 4));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(3, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(3, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(4, 5));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::SAME, order.compare(4, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(4, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(4, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 6));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(5, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::UNKNOWN, order.compare(5, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::ABOVE, order.compare(6, 7));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(6, 8));
    EXPECT_EQ(storm::analysis::Order::NodeComparison::BELOW, order.compare(7, 8));
}

TEST(OrderTest, sort_states) {
    auto numberOfStates = 7;
    auto above = storm::storage::BitVector(numberOfStates);
    above.set(0);
    auto below = storm::storage::BitVector(numberOfStates);
    below.set(1);
    storm::storage::SparseMatrixBuilder<storm::RationalFunction> matrixBuilder(2, 2, 2);
    matrixBuilder.addNextValue(0, 0, storm::RationalFunction(1));
    matrixBuilder.addNextValue(1, 1, storm::RationalFunction(1));
    storm::storage::StronglyConnectedComponentDecompositionOptions options;
    options.forceTopologicalSort();
    auto matrix = matrixBuilder.build();
    auto decomposition = storm::storage::StronglyConnectedComponentDecomposition<storm::RationalFunction>(matrix, options);
    auto statesSorted = storm::utility::graph::getTopologicalSort(matrix);
    auto order = storm::analysis::Order(&above, &below, numberOfStates, decomposition, statesSorted, true);
    order.add(2);
    order.add(3);
    order.addToNode(4, order.getNode(2));
    order.addBetween(5, order.getNode(0), order.getNode(3));
    order.addBetween(6, order.getNode(5), order.getNode(3));

    std::vector<uint_fast64_t> statesToSort = std::vector<uint_fast64_t>{0, 1, 5, 6};
    auto sortedStates = order.sortStates(statesToSort);
    EXPECT_EQ(4ul, sortedStates.size());

    auto itr = sortedStates.begin();
    EXPECT_EQ(0ul, *itr);
    EXPECT_EQ(5ul, *(++itr));
    EXPECT_EQ(6ul, *(++itr));
    EXPECT_EQ(1ul, *(++itr));

    statesToSort = std::vector<uint_fast64_t>{0, 1, 5, 6, 2};
    sortedStates = order.sortStates(statesToSort);
    EXPECT_EQ(5ul, sortedStates.size());

    itr = sortedStates.begin();
    EXPECT_EQ(0ul, *itr);
    EXPECT_EQ(5ul, *(++itr));
    EXPECT_EQ(6ul, *(++itr));
    EXPECT_EQ(1ul, *(++itr));
    EXPECT_EQ(7ul, *(++itr));

    statesToSort = std::vector<uint_fast64_t>{0, 2, 1, 5, 6};
    sortedStates = order.sortStates(statesToSort);
    EXPECT_EQ(5ul, sortedStates.size());

    itr = sortedStates.begin();

    EXPECT_EQ(0ul, *itr);
    EXPECT_EQ(2ul, *(++itr));
    EXPECT_EQ(1ul, *(++itr));
    EXPECT_EQ(7ul, *(++itr));
    EXPECT_EQ(7ul, *(++itr));
}
